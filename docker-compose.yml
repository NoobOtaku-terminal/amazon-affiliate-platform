version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: affiliate_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-affiliate_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-affiliate_password}
      POSTGRES_DB: ${DB_NAME:-affiliate_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - affiliate_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-affiliate_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: affiliate_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - affiliate_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: affiliate_backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-affiliate_user}:${DB_PASSWORD:-affiliate_password}@postgres:5432/${DB_NAME:-affiliate_db}
      REDIS_URL: redis://redis:6379
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - affiliate_network
    command: npm run start:prod

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: affiliate_frontend
    restart: unless-stopped
    env_file:
      - ./frontend/.env
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://backend:5000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - affiliate_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: affiliate_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - affiliate_network

volumes:
  postgres_data:
  redis_data:

networks:
  affiliate_network:
    driver: bridge
